// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric-protos-go/orderer"
	"github.com/hyperledger/fabric/internal/pkg/gateway"
)

type Registry struct {
	EndorsersStub        func(string, string) []gateway.Endorser
	endorsersMutex       sync.RWMutex
	endorsersArgsForCall []struct {
		arg1 string
		arg2 string
	}
	endorsersReturns struct {
		result1 []gateway.Endorser
	}
	endorsersReturnsOnCall map[int]struct {
		result1 []gateway.Endorser
	}
	OrderersStub        func(string) []orderer.AtomicBroadcast_BroadcastClient
	orderersMutex       sync.RWMutex
	orderersArgsForCall []struct {
		arg1 string
	}
	orderersReturns struct {
		result1 []orderer.AtomicBroadcast_BroadcastClient
	}
	orderersReturnsOnCall map[int]struct {
		result1 []orderer.AtomicBroadcast_BroadcastClient
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Registry) Endorsers(arg1 string, arg2 string) []gateway.Endorser {
	fake.endorsersMutex.Lock()
	ret, specificReturn := fake.endorsersReturnsOnCall[len(fake.endorsersArgsForCall)]
	fake.endorsersArgsForCall = append(fake.endorsersArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("Endorsers", []interface{}{arg1, arg2})
	fake.endorsersMutex.Unlock()
	if fake.EndorsersStub != nil {
		return fake.EndorsersStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.endorsersReturns
	return fakeReturns.result1
}

func (fake *Registry) EndorsersCallCount() int {
	fake.endorsersMutex.RLock()
	defer fake.endorsersMutex.RUnlock()
	return len(fake.endorsersArgsForCall)
}

func (fake *Registry) EndorsersCalls(stub func(string, string) []gateway.Endorser) {
	fake.endorsersMutex.Lock()
	defer fake.endorsersMutex.Unlock()
	fake.EndorsersStub = stub
}

func (fake *Registry) EndorsersArgsForCall(i int) (string, string) {
	fake.endorsersMutex.RLock()
	defer fake.endorsersMutex.RUnlock()
	argsForCall := fake.endorsersArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Registry) EndorsersReturns(result1 []gateway.Endorser) {
	fake.endorsersMutex.Lock()
	defer fake.endorsersMutex.Unlock()
	fake.EndorsersStub = nil
	fake.endorsersReturns = struct {
		result1 []gateway.Endorser
	}{result1}
}

func (fake *Registry) EndorsersReturnsOnCall(i int, result1 []gateway.Endorser) {
	fake.endorsersMutex.Lock()
	defer fake.endorsersMutex.Unlock()
	fake.EndorsersStub = nil
	if fake.endorsersReturnsOnCall == nil {
		fake.endorsersReturnsOnCall = make(map[int]struct {
			result1 []gateway.Endorser
		})
	}
	fake.endorsersReturnsOnCall[i] = struct {
		result1 []gateway.Endorser
	}{result1}
}

func (fake *Registry) Orderers(arg1 string) []orderer.AtomicBroadcast_BroadcastClient {
	fake.orderersMutex.Lock()
	ret, specificReturn := fake.orderersReturnsOnCall[len(fake.orderersArgsForCall)]
	fake.orderersArgsForCall = append(fake.orderersArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Orderers", []interface{}{arg1})
	fake.orderersMutex.Unlock()
	if fake.OrderersStub != nil {
		return fake.OrderersStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.orderersReturns
	return fakeReturns.result1
}

func (fake *Registry) OrderersCallCount() int {
	fake.orderersMutex.RLock()
	defer fake.orderersMutex.RUnlock()
	return len(fake.orderersArgsForCall)
}

func (fake *Registry) OrderersCalls(stub func(string) []orderer.AtomicBroadcast_BroadcastClient) {
	fake.orderersMutex.Lock()
	defer fake.orderersMutex.Unlock()
	fake.OrderersStub = stub
}

func (fake *Registry) OrderersArgsForCall(i int) string {
	fake.orderersMutex.RLock()
	defer fake.orderersMutex.RUnlock()
	argsForCall := fake.orderersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Registry) OrderersReturns(result1 []orderer.AtomicBroadcast_BroadcastClient) {
	fake.orderersMutex.Lock()
	defer fake.orderersMutex.Unlock()
	fake.OrderersStub = nil
	fake.orderersReturns = struct {
		result1 []orderer.AtomicBroadcast_BroadcastClient
	}{result1}
}

func (fake *Registry) OrderersReturnsOnCall(i int, result1 []orderer.AtomicBroadcast_BroadcastClient) {
	fake.orderersMutex.Lock()
	defer fake.orderersMutex.Unlock()
	fake.OrderersStub = nil
	if fake.orderersReturnsOnCall == nil {
		fake.orderersReturnsOnCall = make(map[int]struct {
			result1 []orderer.AtomicBroadcast_BroadcastClient
		})
	}
	fake.orderersReturnsOnCall[i] = struct {
		result1 []orderer.AtomicBroadcast_BroadcastClient
	}{result1}
}

func (fake *Registry) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.endorsersMutex.RLock()
	defer fake.endorsersMutex.RUnlock()
	fake.orderersMutex.RLock()
	defer fake.orderersMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Registry) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ gateway.Registry = new(Registry)
